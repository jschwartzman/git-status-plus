#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#############################################################################
# File:          gitStatus.py
# Author:        John Schwartzman, Forte Systems, Inc. 
# Last Revision: 12/15/2019
#############################################################################
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QColor
from PyQt5.QtCore import QDateTime, Qt, QCommandLineParser, QCommandLineOption
from PyQt5.QtWidgets import QListWidget, QListWidgetItem, QApplication

# string color constants
COLOR_BLACK  = '#000000'
COLOR_RED    = '#ff0000'
COLOR_GREEN  = '#00ff00'
COLOR_ORANGE = '#ffcc00'

INI_FILE_NAME = 'gitStatus.ini'

class Ui_GitStatus(object):
    # member variables
    startDirs    = []
    exceptDirs   = []
    isVerbose    = False

    def setupUi(self, GitStatus):
        """
        This method is generated by pyuic5 operating on GitStatusDialog.ui
        """
        GitStatus.setObjectName("GitStatus")
        GitStatus.resize(905, 602)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(GitStatus.sizePolicy().hasHeightForWidth())
        GitStatus.setSizePolicy(sizePolicy)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("git-gui.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        GitStatus.setWindowIcon(icon)
        GitStatus.setStatusTip("")
        self.gridLayout = QtWidgets.QGridLayout(GitStatus)
        self.gridLayout.setObjectName("gridLayout")
        self.label_2 = QtWidgets.QLabel(GitStatus)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setLineWidth(1)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 0, 0, 1, 1)
        self.DateTimeEdit = QtWidgets.QTextEdit(GitStatus)
        self.DateTimeEdit.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.DateTimeEdit.sizePolicy().hasHeightForWidth())
        self.DateTimeEdit.setSizePolicy(sizePolicy)
        self.DateTimeEdit.setMinimumSize(QtCore.QSize(400, 30))
        self.DateTimeEdit.setMaximumSize(QtCore.QSize(400, 30))
        self.DateTimeEdit.setBaseSize(QtCore.QSize(400, 50))
        self.DateTimeEdit.setFocusPolicy(QtCore.Qt.NoFocus)
        self.DateTimeEdit.setAcceptDrops(False)
        self.DateTimeEdit.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.DateTimeEdit.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.DateTimeEdit.setObjectName("DateTimeEdit")
        self.gridLayout.addWidget(self.DateTimeEdit, 0, 1, 1, 1, QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.label_3 = QtWidgets.QLabel(GitStatus)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_3.sizePolicy().hasHeightForWidth())
        self.label_3.setSizePolicy(sizePolicy)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 1, 0, 1, 1)
        self.RepoNumFound = QtWidgets.QTextEdit(GitStatus)
        self.RepoNumFound.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.RepoNumFound.sizePolicy().hasHeightForWidth())
        self.RepoNumFound.setSizePolicy(sizePolicy)
        self.RepoNumFound.setMinimumSize(QtCore.QSize(75, 30))
        self.RepoNumFound.setMaximumSize(QtCore.QSize(50, 10))
        self.RepoNumFound.setFocusPolicy(QtCore.Qt.NoFocus)
        self.RepoNumFound.setAcceptDrops(False)
        self.RepoNumFound.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.RepoNumFound.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.RepoNumFound.setObjectName("RepoNumFound")
        self.gridLayout.addWidget(self.RepoNumFound, 1, 1, 1, 1, QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.label = QtWidgets.QLabel(GitStatus)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 1, 2, 1, 1)
        self.listWidgetRepo = QtWidgets.QListWidget(GitStatus)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(10)
        sizePolicy.setVerticalStretch(10)
        sizePolicy.setHeightForWidth(self.listWidgetRepo.sizePolicy().hasHeightForWidth())
        self.listWidgetRepo.setSizePolicy(sizePolicy)
        self.listWidgetRepo.setMinimumSize(QtCore.QSize(500, 500))
        self.listWidgetRepo.setStatusTip("")
        self.listWidgetRepo.setAutoFillBackground(False)
        self.listWidgetRepo.setFrameShadow(QtWidgets.QFrame.Plain)
        self.listWidgetRepo.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContentsOnFirstShow)
        self.listWidgetRepo.setAlternatingRowColors(True)
        self.listWidgetRepo.setResizeMode(QtWidgets.QListView.Adjust)
        self.listWidgetRepo.setUniformItemSizes(True)
        self.listWidgetRepo.setSelectionRectVisible(True)
        self.listWidgetRepo.setObjectName("listWidgetRepo")
        self.gridLayout.addWidget(self.listWidgetRepo, 2, 0, 2, 2)
        self.listWidgetStatus = QtWidgets.QListWidget(GitStatus)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding, QtWidgets.QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(10)
        sizePolicy.setVerticalStretch(10)
        sizePolicy.setHeightForWidth(self.listWidgetStatus.sizePolicy().hasHeightForWidth())
        self.listWidgetStatus.setSizePolicy(sizePolicy)
        self.listWidgetStatus.setMinimumSize(QtCore.QSize(300, 400))
        self.listWidgetStatus.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContentsOnFirstShow)
        self.listWidgetStatus.setAlternatingRowColors(True)
        self.listWidgetStatus.setResizeMode(QtWidgets.QListView.Adjust)
        self.listWidgetStatus.setObjectName("listWidgetStatus")
        self.gridLayout.addWidget(self.listWidgetStatus, 2, 2, 1, 2)
        self.pushButtonRefresh = QtWidgets.QPushButton(GitStatus)
        self.pushButtonRefresh.setMinimumSize(QtCore.QSize(100, 0))
        self.pushButtonRefresh.setAutoFillBackground(False)
        self.pushButtonRefresh.setAutoDefault(False)
        self.pushButtonRefresh.setObjectName("pushButtonRefresh")
        self.gridLayout.addWidget(self.pushButtonRefresh, 3, 2, 1, 1)
        self.pushButtonClose = QtWidgets.QPushButton(GitStatus)
        self.pushButtonClose.setMinimumSize(QtCore.QSize(100, 0))
        self.pushButtonClose.setAutoDefault(False)
        self.pushButtonClose.setObjectName("pushButtonClose")
        self.gridLayout.addWidget(self.pushButtonClose, 3, 3, 1, 1)
        self.label_3.setBuddy(self.listWidgetRepo)
        self.label.setBuddy(self.listWidgetStatus)

        self.retranslateUi(GitStatus)
        self.pushButtonClose.clicked['bool'].connect(GitStatus.accept)
        QtCore.QMetaObject.connectSlotsByName(GitStatus)
        GitStatus.setTabOrder(self.listWidgetRepo, self.listWidgetStatus)
        GitStatus.setTabOrder(self.listWidgetStatus, self.pushButtonRefresh)
        GitStatus.setTabOrder(self.pushButtonRefresh, self.pushButtonClose)

    def retranslateUi(self, GitStatus):
        """
        This method is generated by pyuic5 operating on GitStatusDialog.ui
        """
        _translate = QtCore.QCoreApplication.translate
        GitStatus.setWindowTitle(_translate("GitStatus", "gitStatus"))
        GitStatus.setToolTip(_translate("GitStatus", "The gitStatus Application"))
        GitStatus.setWhatsThis(_translate("GitStatus", "The gitStatus Application"))
        self.label_2.setText(_translate("GitStatus", "Date/Time:"))
        self.DateTimeEdit.setToolTip(_translate("GitStatus", "Date/Time Repositories Last Checked"))
        self.DateTimeEdit.setWhatsThis(_translate("GitStatus", "Date/Time repositories last searched"))
        self.label_3.setText(_translate("GitStatus", "&Git Repositories:"))
        self.RepoNumFound.setToolTip(_translate("GitStatus", "Number of Repositories"))
        self.RepoNumFound.setWhatsThis(_translate("GitStatus", "Number of repositories"))
        self.label.setText(_translate("GitStatus", "&Status:"))
        self.listWidgetRepo.setToolTip(_translate("GitStatus", "git Repositories"))
        self.listWidgetRepo.setWhatsThis(_translate("GitStatus", "Alphabetized list of repositories"))
        self.listWidgetStatus.setToolTip(_translate("GitStatus", "Status of Selected Repository"))
        self.listWidgetStatus.setWhatsThis(_translate("GitStatus", "Status of selected repository"))
        self.pushButtonRefresh.setToolTip(_translate("GitStatus", "Refresh the view"))
        self.pushButtonRefresh.setWhatsThis(_translate("GitStatus", "Button to Refresh the view"))
        self.pushButtonRefresh.setText(_translate("GitStatus", "&Refresh"))
        self.pushButtonClose.setToolTip(_translate("GitStatus", "Close the application"))
        self.pushButtonClose.setWhatsThis(_translate("GitStatus", "Button to close the application"))
        self.pushButtonClose.setText(_translate("GitStatus", "&Close"))

        # hook up signals (widget outputs) and slots (class member methods)
        self.listWidgetRepo.itemSelectionChanged.connect(self.repoSelectionChanged)
        self.listWidgetStatus.itemSelectionChanged.connect(self.statusSelectionChanged)
        self.pushButtonRefresh.clicked.connect(self.refresh)

    def hasGitDir(self, path):
        """
        This function returns True if path has a subdirectory
        named .git, otherwise it returns False.
        """
        return os.path.isdir(os.path.join(path, '.git'))

    def appendSlash(self, str):
        """
        This function returns str/
        whether or not str ends with '/'
        """
        if not str.endswith('/'):
            str += '/'
        return str

    def quickCheckPriority(self, dir):
        """
        use git status --porcelain to interrogate a repository
        returns COLOR_RED, COLOR_ORANGE or COLOR_GREEN
        """
        p = Popen(["git","status","--porcelain"], cwd = dir, stdout = PIPE)
        p.wait()
        out = p.communicate()[0]
        if p.returncode != 0:
            return COLOR_BLACK          #error
        if out.find(b'M') != -1:
            return COLOR_RED            # modified - high priority
        if out.find(b'??') != -1:
            return COLOR_ORANGE         # untracked - medium priority
        if out.find(b'D') != -1:
            return COLOR_ORANGE         # deleted - medium priority
        if out.find(b'C') != -1:
            return COLOR_ORANGE         # copied - medium priority
        if out.find(b'A') != -1:
            return COLOR_ORANGE         # added - medium priority
        if out.find(b'R') != -1:        
            return COLOR_ORANGE         # renaimed - medium priority
        return COLOR_GREEN              # no problems to report - low priority

    def refresh(self):
        """
        pushButtonRefresh has been clicked
        - clear data structures and widgets
        - calls parseConfigFile()
        - calls populateDialog()
        - selects previously selected item if it still exists
        """
        # get text of currently selected item
        text = self.listWidgetRepo.currentItem().text()
        self.startDirs.clear()
        self.exceptDirs.clear()
        self.listWidgetRepo.clear()
        self.listWidgetStatus.clear()
        if not self.parseConfigFile():    # read/create INI_FILE_NAME
            sys.exit(1)
        self.populateDialog()

        # find the text of the previously selected item
        # if the item exists, select it and scroll to it
        list = self.listWidgetRepo.findItems(text, Qt.MatchExactly)
        if list:    # if list is empty this returns False
            self.listWidgetRepo.setCurrentItem(list[0])
            self.listWidgetRepo.scrollToItem(list[0])
        self.listWidgetRepo.setFocus()

    def statusSelectionChanged(self):
        """
        listWidgetStatus selection has changed
        - modify the listWidgetStatus stylesheet
        """
        self.listWidgetStatus.setStyleSheet("""
        QListWidget::item:selected { color: """ + 
            self.listWidgetStatus.currentItem().data(Qt.UserRole) + """; }
        QListWidget::item:selected { background-color: white; }
        QListWidget::item:selected { border: 2px solid red; }
        """)

    def repoSelectionChanged(self):
        """
        listWidgetRepo selection has changed
        - modify the listWidgetRepo stylesheet
        - clear listWidgetStatus
        - use git status --porcelain to interrogate selected repository
          and populate listWidgetStatus 
        """
        self.listWidgetRepo.setStyleSheet("""
        QListWidget::item:selected { color: """ + 
            self.listWidgetRepo.currentItem().data(Qt.UserRole) + """; }
        QListWidget::item:selected { background-color: white; }
        QListWidget::item:selected { border: 2px solid red; }
        """)

        # use git status --porcelain to interrogate selected repository
        p = Popen(["git","status","--porcelain"], 
            cwd = self.listWidgetRepo.currentItem().text(), stdout = PIPE)
        p.wait() 
        out = p.communicate()[0]
        strArray = out.splitlines()
        self.listWidgetStatus.clear()

        i = 0
        sizeOfList = len(strArray)

        if sizeOfList == 0: # no problems to report
            item = QListWidgetItem('working directory clean')
            item.setData(Qt.UserRole, COLOR_GREEN)
            item.setForeground(QColor(COLOR_GREEN))
            self.listWidgetStatus.addItem(item)
        else: # git status reported problems - add each problem to listWidgetStatus
            while i < sizeOfList:
                line = strArray[i].decode().strip()
                i += 1
                x = line[0];
                y = line[1];
                if x == 'M' or y == 'M':     # modified
                    s = "modified: "
                    color = COLOR_RED
                elif x == 'D' or y == 'D':   # deleted
                    s = "deleted: "
                    color = COLOR_ORANGE
                elif x == 'A' or y == 'A':   # added
                    s = "added: "
                    color = COLOR_ORANGE
                elif x == 'R' or y == 'R':   # renamed
                    s = "renamed: "
                    color = COLOR_ORANGE
                elif x == 'C' or y == 'C':   # copied
                    s = "copied: "
                    color = COLOR_ORANGE
                elif x == '?' or y == '?':   # untracked
                    s = "untracked: "
                    color = COLOR_ORANGE

                item = QListWidgetItem(s + line[2:])
                item.setData(Qt.UserRole, color)
                item.setForeground(QColor(color))
                self.listWidgetStatus.addItem(item)

    def populateDialog(self):
        """
        - display current date and time
        - walk the filesystem to search for git repositories
        - show ignored directories in verbose mode
        - populate listWidgetRepo with directories that have git repositories
        - alphabetize listWidgetRepo
        - display number of repositories (nRepoCount)
        """
        dt = QDateTime.currentDateTime()
        self.DateTimeEdit.setPlainText(dt.toString(Qt.DefaultLocaleLongDate))
        
        nRepoCount = 0
        ignoredDirs = []
        # for each startDir walk the filesystem
        for start in self.startDirs:
            start = self.appendSlash(start)
            if not os.path.isdir(start):
                print('Error: ' + start + ' is not a directory.\n')
                sys.exit(1)

            if self.isVerbose:
                print('\nSearching for git repositories starting at ' 
                    + start + '...')

            # walk the filesystem to search for git repositories
            for root, dirs, __ in os.walk(start):
                if self.isVerbose:
                    for dir in dirs:
                        if dir in self.exceptDirs:
                            if not dir in ignoredDirs:
                                ignoredDirs.append(dir)
                                print('Ignoring: ' + dir)

                # now prune dirs in place using a list comprehension
                dirs[:] = [d for d in dirs if d not in self.exceptDirs]
                for dir in dirs:
                    thisDir = os.path.join(root, dir)

                    if thisDir.find('.git') != -1:    # we're inside a git dir
                        continue

                    if self.hasGitDir(thisDir):
                        # we found a directory that has a child .git directory 
                        # create a new QListWidgetItem
                        #  - set its text to thisDir
                        #  - set its data to the appropriate color for this item
                        #  - insert the item into listWidgetRepo
                        item = QListWidgetItem(thisDir)
                        item.setData(Qt.UserRole, self.quickCheckPriority(thisDir))
                        self.listWidgetRepo.addItem(item)
                        nRepoCount += 1
                        continue

        # after all items have been added to listWidgetRepo, 
        # 1. alphabetize the list
        self.listWidgetRepo.setSortingEnabled(True)
        self.listWidgetRepo.sortItems()

        # 2. set the foreground color for each item in the alphabetized list
        for i in range(nRepoCount):
            item = self.listWidgetRepo.item(i)
            item.setForeground(QColor(item.data(Qt.UserRole)))

        self.listWidgetRepo.setFocus();
        self.listWidgetRepo.setCurrentRow(0)
        self.RepoNumFound.setPlainText(str(nRepoCount))
        self.RepoNumFound.setAlignment(Qt.AlignRight)
            
    def parseConfigFile(self):
        """
        read / create ini file
        Parse the ini file
        load startDirs and exceptDirs
        display startDirs and exceptDirs in verbose mode
        """
        parser = ConfigParser(allow_no_value=True)  # elements don't have values
        parser.optionxform = str    # ini file is case sensitive
        # we must have an absolute path to INI_FILE_NAME or ParseConfigFile will
        # create an ini file in the directory we're in when we run the program
        iniFile = os.path.abspath(os.path.join(os.path.dirname(sys.argv[0]),
                                               INI_FILE_NAME))
        try:
            with open(iniFile) as f:
                parser.read_file(f)
            
            if self.isVerbose:
                print('\nReading ' + iniFile + ' ...')

            for element in parser.sections():
                if element == 'startDirs':
                    for name, __ in parser.items(element):
                        if not name in self.startDirs:   # avoid duplicates
                            self.startDirs.append(name)
                if element == 'exceptDirs':
                    for name, __ in parser.items(element):
                        if not name in self.exceptDirs:  # avoid duplicates
                            self.exceptDirs.append(name)

        except IOError:
            if self.isVerbose:
                print('\nWriting ' + iniFile + ' ...')
            parser.add_section('startDirs')
            envHome = os.getenv('HOME')
            if not envHome:
                print('\nError: Environment variable HOME has not been set. Please set it.\n')
                return False;
            parser.set('startDirs', envHome)
            self.startDirs.append(envHome)
            parser.add_section('exceptDirs')
            parser.set('exceptDirs', 'github.com')
            parser.set('exceptDirs', 'golang.org')
            self.exceptDirs.append('github.com')
            self.exceptDirs.append('golang.org')
            try:
                with open(iniFile, 'w') as configfile:
                    parser.write(configfile)
            except IOError:
                print('\nError: Could not open ' + iniFile + 
                      ' for writing. Check file permissions.\n')
                return False

        if self.isVerbose:
            # report on the contents of the ini file
            print('[startDirs]')
            for dir in self.startDirs:
                print(dir)
            print('[startDirs] contains ' + str(self.startDirs.__len__()) 
                + ' item(s).\n')
            print('[exceptDirs]')
            for dir in self.exceptDirs:
                print(dir)
            print('[exceptDirs] contains ' + str(self.exceptDirs.__len__()) 
                + ' item(s).\n')

        return True

if __name__ == "__main__":
    """
    main function
    - process command line options (--help, --version, --verbose)
    - create instance of application class (ui)
    - call setupUi to set dialog properties (calls retranslateUi)
    - call parseConfigFile
    - show the QDialog
    - the application will process messages until it is told to exit
    """
    import sys, os
    from subprocess import Popen, PIPE
    from configparser import ConfigParser

    app = QApplication(sys.argv)
    app.setApplicationName("gitStatus.py")
    app.setApplicationVersion("1.0.0")

    clp = QCommandLineParser()    # handle command line options
    clp.addHelpOption()
    clp.addVersionOption()
    verboseOption = QCommandLineOption(
        "verbose", "Issue progress messages to console.")
    clp.addOption(verboseOption)
    clp.process(sys.argv)

    GitStatus = QtWidgets.QDialog() # create QDialog 
    ui = Ui_GitStatus() # instantiate ui
    ui.setupUi(GitStatus)   # configure all widgets
    ui.isVerbose = clp.isSet(verboseOption)

    if not ui.parseConfigFile():    # read the .ini file
        sys.exit(1)

    ui.populateDialog() # populate the dialog's widgets

    GitStatus.show()    # make the dialog visible
    sys.exit(app.exec_())   # handle all messages until exit
